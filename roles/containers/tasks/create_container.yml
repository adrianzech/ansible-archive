---
- name: Load variables
  include_vars: "{{ current_container }}.yml"

- name: Create container directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop: "{{ container_directories if container_directories is iterable else [] }}"

- name: Create container
  become: true
  become_user: "{{ user }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "{{ image }}:{{ tag }}"
    label:
      io.containers.autoupdate: registry
    command: "{{ container_command }}"
    ports: "{{ container_ports }}"
    env: "{{ container_env }}"
    volume: "{{ container_volumes }}"
    state: created
    recreate: true

- name: Create systemd user directory
  file:
    path: "/home/{{ user }}/.config/systemd/user/"
    state: directory
    mode: 0755
    owner: "{{ owner }}"
    group: "{{ group }}"

- name: Delete old service file if it exists
  file:
    path: "/home/{{ user }}/.config/systemd/user/{{ container_name }}.service"
    state: absent

- name: Create systemd service file
  become: true
  become_user: "{{ user }}"
  command: "podman generate systemd --new --name {{ container_name }} | tee /home/{{ user }}/.config/systemd/user/{{ container_name }}.service"
  args:
    creates: /home/{{ user }}/.config/systemd/user/{{ container_name }}.service

- name: Ensure container is running and enabled
  become: true
  become_user: "{{ user }}"
  service:
    name: "{{ container_name }}"
    daemon_reload: true
    state: started
    enabled: true
    scope: user
    masked: false
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ myuid }}"

- name: Check if firewall service exists
  delegate_to: localhost
  stat:
    path: "{{ role_path }}/files/{{ container_name }}.xml"
  register: file

- name: Import firewall service
  copy:
    src: "{{ container_name }}.xml"
    dest: "/etc/firewalld/services/{{ container_name }}.xml"
    owner: root
    group: root
    mode: 0644
  when: file.stat.exists

- name: Restart firewalld
  service:
    name: firewalld
    state: restarted
  when: file.stat.exists

- name: Create firewall rule
  firewalld:
    service: "{{ container_name }}"
    zone: public
    state: enabled
    permanent: true
    immediate: true
  when: file.stat.exists
